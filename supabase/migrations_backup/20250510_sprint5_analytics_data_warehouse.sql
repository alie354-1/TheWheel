-- Sprint 5: Analytics Data Warehouse Migration
-- Creates analytics_events, analytics_aggregates, analytics_reports, analytics_dashboards, and relationships
-- Includes indexes and RLS policies

-- 1. ANALYTICS EVENTS TABLE
CREATE TABLE IF NOT EXISTS public.analytics_events (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_name text NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    company_id uuid REFERENCES public.companies(id) ON DELETE CASCADE,
    payload jsonb,
    created_at timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_analytics_events_event_name ON public.analytics_events(event_name);
CREATE INDEX IF NOT EXISTS idx_analytics_events_user_id ON public.analytics_events(user_id);
CREATE INDEX IF NOT EXISTS idx_analytics_events_company_id ON public.analytics_events(company_id);
CREATE INDEX IF NOT EXISTS idx_analytics_events_created_at ON public.analytics_events(created_at);

COMMENT ON TABLE public.analytics_events IS 'Stores individual trackable events generated by user interactions or system processes.';

-- 2. ANALYTICS AGGREGATES TABLE
CREATE TABLE IF NOT EXISTS public.analytics_aggregates (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    metric_name text NOT NULL,
    dimensions jsonb NOT NULL DEFAULT '{}'::jsonb,
    value jsonb,
    calculated_at timestamptz NOT NULL DEFAULT now(),
    time_period_start timestamptz,
    time_period_end timestamptz
);

CREATE INDEX IF NOT EXISTS idx_analytics_aggregates_metric_name ON public.analytics_aggregates(metric_name);
CREATE INDEX IF NOT EXISTS idx_analytics_aggregates_dimensions ON public.analytics_aggregates USING gin (dimensions);
CREATE INDEX IF NOT EXISTS idx_analytics_aggregates_calculated_at ON public.analytics_aggregates(calculated_at);
CREATE INDEX IF NOT EXISTS idx_analytics_aggregates_time_period ON public.analytics_aggregates(time_period_start, time_period_end);

COMMENT ON TABLE public.analytics_aggregates IS 'Stores pre-calculated metrics for faster reporting and dashboard loading.';

-- 3. ANALYTICS REPORTS TABLE
CREATE TABLE IF NOT EXISTS public.analytics_reports (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    description text,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    company_id uuid REFERENCES public.companies(id) ON DELETE CASCADE,
    configuration jsonb NOT NULL DEFAULT '{}'::jsonb,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_analytics_reports_user_id ON public.analytics_reports(user_id);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_company_id ON public.analytics_reports(company_id);

COMMENT ON TABLE public.analytics_reports IS 'Stores definitions and configurations for user-created custom reports.';

-- 4. ANALYTICS DASHBOARDS TABLE
CREATE TABLE IF NOT EXISTS public.analytics_dashboards (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    description text,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    company_id uuid REFERENCES public.companies(id) ON DELETE CASCADE,
    layout jsonb NOT NULL DEFAULT '{}'::jsonb,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_analytics_dashboards_user_id ON public.analytics_dashboards(user_id);
CREATE INDEX IF NOT EXISTS idx_analytics_dashboards_company_id ON public.analytics_dashboards(company_id);

COMMENT ON TABLE public.analytics_dashboards IS 'Stores definitions for user-customized dashboards.';

-- 5. DASHBOARD-REPORT RELATIONSHIP TABLE
CREATE TABLE IF NOT EXISTS public.analytics_dashboard_reports (
    dashboard_id uuid NOT NULL REFERENCES public.analytics_dashboards(id) ON DELETE CASCADE,
    report_id uuid NOT NULL REFERENCES public.analytics_reports(id) ON DELETE CASCADE,
    position jsonb NOT NULL DEFAULT '{}'::jsonb,
    created_at timestamptz NOT NULL DEFAULT now(),
    PRIMARY KEY (dashboard_id, report_id)
);

COMMENT ON TABLE public.analytics_dashboard_reports IS 'Links reports to dashboards and defines their position and size within the layout.';

-- 6. ROW LEVEL SECURITY (RLS) POLICIES
ALTER TABLE public.analytics_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.analytics_aggregates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.analytics_reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.analytics_dashboards ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.analytics_dashboard_reports ENABLE ROW LEVEL SECURITY;

-- Allow users to manage their own reports/dashboards/events
CREATE POLICY IF NOT EXISTS "Allow users to manage their own reports"
  ON public.analytics_reports FOR ALL
  USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY IF NOT EXISTS "Allow users to manage their own dashboards"
  ON public.analytics_dashboards FOR ALL
  USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY IF NOT EXISTS "Allow users to manage report links for their dashboards"
  ON public.analytics_dashboard_reports FOR ALL
  USING (EXISTS (SELECT 1 FROM public.analytics_dashboards d WHERE d.id = dashboard_id AND d.user_id = auth.uid()))
  WITH CHECK (EXISTS (SELECT 1 FROM public.analytics_dashboards d WHERE d.id = dashboard_id AND d.user_id = auth.uid()));

CREATE POLICY IF NOT EXISTS "Allow users to insert their own events"
  ON public.analytics_events FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY IF NOT EXISTS "Allow users to select their own events"
  ON public.analytics_events FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY IF NOT EXISTS "Allow authenticated users to select aggregates"
  ON public.analytics_aggregates FOR SELECT
  USING (auth.role() = 'authenticated');

-- 7. GRANTS
GRANT USAGE ON SCHEMA public TO supabase_admin;
GRANT ALL ON TABLE public.analytics_events TO supabase_admin;
GRANT ALL ON TABLE public.analytics_aggregates TO supabase_admin;
GRANT ALL ON TABLE public.analytics_reports TO supabase_admin;
GRANT ALL ON TABLE public.analytics_dashboards TO supabase_admin;
GRANT ALL ON TABLE public.analytics_dashboard_reports TO supabase_admin;

GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.analytics_events TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.analytics_aggregates TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.analytics_reports TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.analytics_dashboards TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.analytics_dashboard_reports TO authenticated;

-- 8. TRIGGERS FOR UPDATED_AT (OPTIONAL: Only if set_updated_at() exists)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'set_updated_at') THEN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_analytics_reports_updated_at') THEN
      CREATE TRIGGER set_analytics_reports_updated_at
      BEFORE UPDATE ON public.analytics_reports
      FOR EACH ROW
      EXECUTE FUNCTION public.set_updated_at();
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_analytics_dashboards_updated_at') THEN
      CREATE TRIGGER set_analytics_dashboards_updated_at
      BEFORE UPDATE ON public.analytics_dashboards
      FOR EACH ROW
      EXECUTE FUNCTION public.set_updated_at();
    END IF;
  END IF;
END $$;

-- END OF MIGRATION
