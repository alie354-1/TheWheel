-- Migration for Sprint 5: AI Model Infrastructure Tables (Idempotent v3)

-- Function `is_claims_admin` is now created in `20250506005000_sprint5_add_is_claims_admin_function.sql`

-- Table: ai_models
CREATE TABLE IF NOT EXISTS public.ai_models (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    model_name text NOT NULL UNIQUE,
    model_type text NOT NULL,
    version text NOT NULL,
    description text,
    parameters jsonb,
    training_data_source text,
    trained_at timestamptz,
    deployed_at timestamptz,
    is_active boolean DEFAULT false,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_models IS 'Stores metadata about trained AI models used for predictions and recommendations.';
-- Apply trigger (Idempotent Check)
DO $$ BEGIN IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'set_updated_at') THEN IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_ai_models_updated_at') THEN CREATE TRIGGER set_ai_models_updated_at BEFORE UPDATE ON public.ai_models FOR EACH ROW EXECUTE FUNCTION public.set_updated_at(); END IF; END IF; END $$;

-- Table: ai_recommendation_logs
CREATE TABLE IF NOT EXISTS public.ai_recommendation_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    model_id uuid REFERENCES public.ai_models(id) ON DELETE SET NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    company_id uuid REFERENCES public.companies(id) ON DELETE CASCADE,
    recommendation_type text NOT NULL,
    input_context jsonb,
    recommendation_payload jsonb NOT NULL,
    confidence_score float,
    user_feedback smallint,
    feedback_reason text,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_recommendation_logs IS 'Logs recommendations generated by AI models and tracks user feedback.';
-- Indexes (Idempotent Check)
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_recommendation_logs_model_id' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_recommendation_logs_model_id ON public.ai_recommendation_logs(model_id); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_recommendation_logs_user_id' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_recommendation_logs_user_id ON public.ai_recommendation_logs(user_id); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_recommendation_logs_company_id' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_recommendation_logs_company_id ON public.ai_recommendation_logs(company_id); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_recommendation_logs_recommendation_type' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_recommendation_logs_recommendation_type ON public.ai_recommendation_logs(recommendation_type); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_recommendation_logs_created_at' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_recommendation_logs_created_at ON public.ai_recommendation_logs(created_at); END IF; END $$;

-- Table: ai_model_training_data
CREATE TABLE IF NOT EXISTS public.ai_model_training_data (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    model_type text NOT NULL,
    feature_data jsonb NOT NULL,
    label_data jsonb,
    source_event_id uuid,
    is_processed boolean DEFAULT false,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_model_training_data IS 'Collects data points potentially useful for training or retraining AI models.';
-- Indexes (Idempotent Check)
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_model_training_data_model_type' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_model_training_data_model_type ON public.ai_model_training_data(model_type); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_model_training_data_is_processed' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_model_training_data_is_processed ON public.ai_model_training_data(is_processed); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_model_training_data_created_at' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_model_training_data_created_at ON public.ai_model_training_data(created_at); END IF; END $$;

-- Table: ai_model_performance
CREATE TABLE IF NOT EXISTS public.ai_model_performance (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    model_id uuid NOT NULL REFERENCES public.ai_models(id) ON DELETE CASCADE,
    metric_name text NOT NULL,
    metric_value float NOT NULL,
    evaluation_period_start timestamptz,
    evaluation_period_end timestamptz,
    evaluation_details jsonb,
    evaluated_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_model_performance IS 'Tracks key performance metrics for deployed AI models over time.';
-- Indexes (Idempotent Check)
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_model_performance_model_id' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_model_performance_model_id ON public.ai_model_performance(model_id); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_model_performance_metric_name' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_model_performance_metric_name ON public.ai_model_performance(metric_name); END IF; END $$;
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'idx_ai_model_performance_evaluated_at' AND n.nspname = 'public') THEN CREATE INDEX idx_ai_model_performance_evaluated_at ON public.ai_model_performance(evaluated_at); END IF; END $$;

-- Enable RLS (Postgres <14 compatible)
ALTER TABLE public.ai_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_recommendation_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_model_training_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_model_performance ENABLE ROW LEVEL SECURITY;

-- RLS Policies (Drop and Create for idempotency)
DROP POLICY IF EXISTS "Allow admin full access to AI models" ON public.ai_models;
CREATE POLICY "Allow admin full access to AI models" ON public.ai_models FOR ALL USING (public.is_claims_admin());

DROP POLICY IF EXISTS "Allow authenticated users to read active AI models" ON public.ai_models;
CREATE POLICY "Allow authenticated users to read active AI models" ON public.ai_models FOR SELECT USING (auth.role() = 'authenticated' AND is_active = true);

DROP POLICY IF EXISTS "Allow users to view their own recommendation logs" ON public.ai_recommendation_logs;
CREATE POLICY "Allow users to view their own recommendation logs" ON public.ai_recommendation_logs FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Allow users to provide feedback on their recommendations" ON public.ai_recommendation_logs;
CREATE POLICY "Allow users to provide feedback on their recommendations" ON public.ai_recommendation_logs FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Allow admin full access to recommendation logs" ON public.ai_recommendation_logs;
CREATE POLICY "Allow admin full access to recommendation logs" ON public.ai_recommendation_logs FOR ALL USING (public.is_claims_admin());

DROP POLICY IF EXISTS "Allow admin full access to training data" ON public.ai_model_training_data;
CREATE POLICY "Allow admin full access to training data" ON public.ai_model_training_data FOR ALL USING (public.is_claims_admin());

DROP POLICY IF EXISTS "Allow admin full access to model performance" ON public.ai_model_performance;
CREATE POLICY "Allow admin full access to model performance" ON public.ai_model_performance FOR ALL USING (public.is_claims_admin());

DROP POLICY IF EXISTS "Allow authenticated users to read model performance" ON public.ai_model_performance;
CREATE POLICY "Allow authenticated users to read model performance" ON public.ai_model_performance FOR SELECT USING (auth.role() = 'authenticated');


-- Grant usage permissions (Generally safe to re-run)
GRANT USAGE ON SCHEMA public TO supabase_admin;
GRANT ALL ON TABLE public.ai_models TO supabase_admin;
GRANT ALL ON TABLE public.ai_recommendation_logs TO supabase_admin;
GRANT ALL ON TABLE public.ai_model_training_data TO supabase_admin;
GRANT ALL ON TABLE public.ai_model_performance TO supabase_admin;

GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT ON TABLE public.ai_models TO authenticated;
GRANT SELECT, UPDATE (user_feedback, feedback_reason) ON TABLE public.ai_recommendation_logs TO authenticated;
GRANT SELECT ON TABLE public.ai_model_performance TO authenticated;

-- Grant broader permissions to admin/service roles as needed
-- GRANT ALL ON TABLE public.ai_models TO service_role;
-- GRANT ALL ON TABLE public.ai_recommendation_logs TO service_role;
-- GRANT ALL ON TABLE public.ai_model_training_data TO service_role;
-- GRANT ALL ON TABLE public.ai_model_performance TO service_role;
