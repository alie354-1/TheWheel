import { supabase } from '../supabase';
import { UserProfile } from '../types/profile.types';

export interface ProfileService {
  getProfile: (userId: string) => Promise<UserProfile | null>;
  updateProfile: (userId: string, data: Partial<UserProfile>) => Promise<UserProfile>;
  updateSetupProgress: (userId: string, progress: any) => Promise<void>;
}

class SupabaseProfileService implements ProfileService {
  async getProfile(userId: string): Promise<UserProfile | null> {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) throw error;
    return data;
  }

  async updateProfile(userId: string, data: Partial<UserProfile>): Promise<UserProfile> {
    const { data: profile, error } = await supabase
      .from('profiles')
      .update({
        ...data,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;
    return profile;
  }

  async updateSetupProgress(userId: string, progress: any): Promise<void> {
    const { error } = await supabase
      .from('profiles')
      .update({
        setup_progress: progress,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    if (error) throw error;
  }
}

// Always use the real profile service
export const profileService = new SupabaseProfileService();
